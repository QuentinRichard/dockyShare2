import '@/../node_modules/react-simple-tree-menu/dist/main.css';
import { useDockyShareContext } from '@/app/dashboard/context';
import { IPropertiesTable } from '@/db/schema/property';
import { useState } from 'react';
import TreeMenu, { ItemComponent } from 'react-simple-tree-menu';
import 'react-toastify/dist/ReactToastify.css';
import CreateModal, { ModalProps } from '../Modal/CreateModal';

export interface DashMenuProps {
    navigation: (dockySlug: string) => void
}

interface TreeNode {
    key: string;
    label: string;
    nodes?: TreeNode[];
}

export default function DashMenu() {
    const [expendedId, setExpendedId] = useState(0);
    const [modalProps, setModalProps] = useState({} as ModalProps)
    const { trees } = useDockyShareContext();







    //TODO slug must be manage when the docky have to link to tree .... => EditTools(item.id!.toString())

    const FormatedTree = (trees: IPropertiesTable[], formated: TreeNode[]) => {
        trees.forEach(t => {
            formated.push({
                key: t.content!.length ? t.content : t.id!.toString(),
                label: t.name,
                nodes: t.children ? FormatedTree(t.children, []) : undefined
            } as TreeNode);
        })
        return formated;
    }

    const getformatedTree = (trees: IPropertiesTable[]) => {
        const formated: TreeNode[] = [];
        return FormatedTree(trees, formated);
    }

    return (
        <div
            id="sidebar-multi-level-sidebar"
            className="h-full border-r border-black transition-all"
            aria-label="Sidebar"
        >
            <TreeMenu
                data={getformatedTree(trees)}
                onClickItem={({ key, label, ...props }) => {
                    console.log(key, label, props);
                }}
            >
                {({ items, resetOpenNodes }) => (
                    <div>
                        <button onClick={resetOpenNodes} />
                        {/* {defaultChildren({ search, items })} */}
                        <ul>
                            {items.map(({ key, ...props }) => (
                                <ItemComponent key={key} search {...props} />
                            ))}
                        </ul>
                    </div>
                )}
            </TreeMenu>
            <CreateModal {...modalProps} />
        </div >


    );
}
